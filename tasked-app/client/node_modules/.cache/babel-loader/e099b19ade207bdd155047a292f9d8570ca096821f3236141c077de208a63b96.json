{"ast":null,"code":"// src/services/api.js\n\n// --- 1. USERS & PROJECTS MOCK DATA ---\n// Added email field for all initial mock users for consistency\nlet mockUsers = [{\n  id: 'user-1',\n  name: 'Alice Johnson',\n  email: 'alice@example.com',\n  role: 'Project Manager'\n}, {\n  id: 'user-2',\n  name: 'Bob Smith',\n  email: 'bob@example.com',\n  role: 'Developer'\n}, {\n  id: 'user-3',\n  name: 'Charlie Davis',\n  email: 'charlie@example.com',\n  role: 'Tester'\n}, {\n  id: 'user-4',\n  name: 'Diana Prince',\n  email: 'diana@example.com',\n  role: 'UX Designer'\n}];\nexport const projectTypes = ['Scrum', 'Kanban', 'Basic'];\nexport const statuses = ['To Do', 'In Progress', 'Done', 'Review', 'Blocked'];\nlet projects = [{\n  id: 'PROJ-001',\n  name: 'Tasked App Core',\n  key: 'TASKD',\n  type: 'Kanban',\n  managerId: 'user-1',\n  memberIds: ['user-1', 'user-2', 'user-3', 'user-4'],\n  tasks: [{\n    id: 'TASKD-1',\n    summary: 'Setup React structure',\n    status: 'Done',\n    priority: 'High',\n    assigneeId: 'user-2',\n    description: 'Initialize the app and set up routing.'\n  }, {\n    id: 'TASKD-2',\n    summary: 'Implement drag-and-drop',\n    status: 'In Progress',\n    priority: 'High',\n    assigneeId: 'user-2',\n    description: 'Use native D&D events to move cards between columns.'\n  }, {\n    id: 'TASKD-3',\n    summary: 'Design Project List Page',\n    status: 'To Do',\n    priority: 'Medium',\n    assigneeId: 'user-4',\n    description: 'Create a clean, functional design for the project selection list.'\n  }, {\n    id: 'TASKD-4',\n    summary: 'Write API mock data',\n    status: 'Blocked',\n    priority: 'High',\n    assigneeId: 'user-3',\n    description: 'Create and refine mock data for users, projects, and tasks.'\n  }]\n}, {\n  id: 'PROJ-002',\n  name: 'Marketing Campaign Launch',\n  key: 'MKTG',\n  type: 'Scrum',\n  managerId: 'user-4',\n  memberIds: ['user-1', 'user-4'],\n  tasks: [{\n    id: 'MKTG-1',\n    summary: 'Finalize ad copy',\n    status: 'Done',\n    priority: 'Medium',\n    assigneeId: 'user-4',\n    description: 'Review and approve all marketing ad copy.'\n  }, {\n    id: 'MKTG-2',\n    summary: 'Schedule social posts',\n    status: 'In Progress',\n    priority: 'Low',\n    assigneeId: 'user-1',\n    description: 'Schedule all posts for the first week of the campaign.'\n  }]\n}];\nconst API_DELAY = 300; // Simulate network latency\n\n// --- 2. LOCAL STORAGE MANAGEMENT ---\nconst loadProjects = () => {\n  try {\n    const storedProjects = localStorage.getItem('taskedProjects');\n    if (storedProjects) {\n      projects = JSON.parse(storedProjects);\n    }\n  } catch (e) {\n    console.error(\"Could not load projects from local storage:\", e);\n  }\n};\n\n// NEW: Load users from local storage\nconst loadUsers = () => {\n  try {\n    const storedUsers = localStorage.getItem('taskedUsers');\n    if (storedUsers) {\n      mockUsers = JSON.parse(storedUsers);\n    }\n  } catch (e) {\n    console.error(\"Could not load users from local storage:\", e);\n  }\n};\n\n// Update: Saves both projects and users (if users change, which can happen in addProjectMember)\nconst saveProjects = currentProjects => {\n  try {\n    localStorage.setItem('taskedProjects', JSON.stringify(currentProjects));\n    localStorage.setItem('taskedUsers', JSON.stringify(mockUsers)); // Always save users when saving projects\n  } catch (e) {\n    console.error(\"Could not save data to local storage:\", e);\n  }\n};\n\n// Load data immediately when the script runs\nloadProjects();\nloadUsers(); // Load users as well\n\n// Helper to get user name for tasks and projects\nconst getUserName = id => {\n  const user = mockUsers.find(u => u.id === id);\n  // If user is not found, it means they might have been added on another machine/session \n  // but the local storage hasn't been synced. Return a placeholder.\n  return user ? user.name : 'Unassigned (ID: ' + id + ')';\n};\n\n// --- 3. API FUNCTIONS ---\n\n// Gets all users (now potentially including dynamically added users)\nexport const getAllUsers = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        status: 200,\n        data: mockUsers\n      });\n    }, API_DELAY);\n  });\n};\n\n// Gets the list of all projects for the ProjectList page\nexport const getProjects = () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        status: 200,\n        data: projects\n      });\n    }, API_DELAY);\n  });\n};\n\n// Gets details for a single project (used by KanbanBoard and TaskDetail)\nexport const getProjectDetails = projectKey => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const project = projects.find(p => p.key === projectKey);\n      if (project) {\n        // Populate task assignee names for display\n        const populatedTasks = project.tasks.map(task => ({\n          ...task,\n          assigneeName: getUserName(task.assigneeId)\n        }));\n        const members = project.memberIds.map(id => {\n          // Use mockUsers (which may contain new users)\n          const user = mockUsers.find(u => u.id === id);\n          return user ? {\n            id: user.id,\n            name: user.name,\n            role: user.role\n          } : {\n            id,\n            name: 'Unknown User',\n            role: 'N/A'\n          };\n        });\n        resolve({\n          status: 200,\n          data: {\n            ...project,\n            tasks: populatedTasks\n          },\n          members: members,\n          statuses: statuses,\n          allUsers: mockUsers // Provide all users (including new ones) for task assignment dropdowns\n        });\n        return;\n      }\n      resolve({\n        status: 404,\n        error: 'Project not found'\n      });\n    }, API_DELAY);\n  });\n};\n\n// Updates a single field in a task (used by TaskDetail and KanbanBoard for drag-and-drop)\nexport const updateTask = (projectKey, taskId, updates) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const projectIndex = projects.findIndex(p => p.key === projectKey);\n      if (projectIndex !== -1) {\n        const taskIndex = projects[projectIndex].tasks.findIndex(t => t.id === taskId);\n        if (taskIndex !== -1) {\n          projects[projectIndex].tasks[taskIndex] = {\n            ...projects[projectIndex].tasks[taskIndex],\n            ...updates // updates includes status or assigneeId\n          };\n          saveProjects(projects);\n          resolve({\n            status: 200,\n            data: projects[projectIndex].tasks[taskIndex]\n          });\n          return;\n        }\n      }\n      resolve({\n        status: 404,\n        error: 'Task or Project not found'\n      });\n    }, API_DELAY);\n  });\n};\n\n// Creates a new task (used by CreateTaskModal)\nexport const createTask = (projectKey, newTask) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const projectIndex = projects.findIndex(p => p.key === projectKey);\n      if (projectIndex !== -1) {\n        // Generate next task ID\n        const nextIdNumber = projects[projectIndex].tasks.length + 1;\n        const nextId = `${projectKey}-${nextIdNumber}`;\n        const taskWithId = {\n          ...newTask,\n          id: nextId.toUpperCase(),\n          assigneeId: newTask.assigneeId || ''\n        };\n        projects[projectIndex].tasks.push(taskWithId);\n        saveProjects(projects);\n        resolve({\n          status: 201,\n          data: taskWithId\n        });\n        return;\n      }\n      resolve({\n        status: 404,\n        error: 'Project not found'\n      });\n    }, API_DELAY);\n  });\n};\n\n// Creates a new project (used by CreateProjectModal)\nexport const createProject = newProjectData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      // 1. Check if key already exists\n      if (projects.some(p => p.key === newProjectData.key.toUpperCase())) {\n        reject({\n          status: 409,\n          message: `Project key '${newProjectData.key.toUpperCase()}' already exists.`\n        });\n        return;\n      }\n\n      // 2. Generate new unique ID for the project\n      const nextIdNumber = projects.length + 1;\n      const nextId = `PROJ-${String(nextIdNumber).padStart(3, '0')}`; // e.g., PROJ-003\n\n      // 3. Construct the new project object\n      const newProject = {\n        id: nextId,\n        name: newProjectData.name,\n        key: newProjectData.key.toUpperCase(),\n        type: newProjectData.type,\n        managerId: newProjectData.managerId,\n        memberIds: [newProjectData.managerId],\n        // Manager is the initial member\n        tasks: [] // Starts with an empty task list\n      };\n\n      // 4. Add to list and save\n      projects.push(newProject);\n      saveProjects(projects);\n      resolve({\n        status: 201,\n        data: newProject,\n        message: `Project ${newProject.key} created successfully.`\n      });\n    }, API_DELAY);\n  });\n};\n\n// Adds a member to an existing project (used by ProjectSettings)\nexport const addProjectMember = (projectKey, email) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const projectIndex = projects.findIndex(p => p.key === projectKey);\n      const normalizedEmail = email.toLowerCase().trim();\n      if (projectIndex === -1) {\n        return reject({\n          status: 404,\n          message: `Project ${projectKey} not found.`\n        });\n      }\n\n      // 1. Try to find existing user by email\n      let existingUser = mockUsers.find(u => u.email === normalizedEmail);\n      let userId;\n      let message;\n      if (existingUser) {\n        userId = existingUser.id;\n        message = `Existing user ${existingUser.name} added to project.`;\n      } else {\n        // 2. User does not exist - Create a new user (mocking registration)\n        const nextUserIdNumber = mockUsers.length + 1;\n        const newUserId = `user-${nextUserIdNumber}`;\n        const newUserName = normalizedEmail.split('@')[0]; // Use the part before @ as a default name\n\n        const newUser = {\n          id: newUserId,\n          // Capitalize the first letter of the default name\n          name: newUserName.charAt(0).toUpperCase() + newUserName.slice(1),\n          email: normalizedEmail,\n          role: 'Unassigned' // Default role for new users\n        };\n        mockUsers.push(newUser); // Add new user to mock data\n        userId = newUserId;\n        message = `New user ${newUser.name} created and added to project.`;\n      }\n\n      // 3. Check if user is already a member\n      if (projects[projectIndex].memberIds.includes(userId)) {\n        return reject({\n          status: 409,\n          message: 'User is already a member of this project.'\n        });\n      }\n\n      // 4. Add the user ID to the project members list\n      projects[projectIndex].memberIds.push(userId);\n\n      // 5. Save both updated projects and users\n      saveProjects(projects);\n      resolve({\n        status: 200,\n        message: message,\n        newUserId: userId\n      });\n    }, API_DELAY);\n  });\n};","map":{"version":3,"names":["mockUsers","id","name","email","role","projectTypes","statuses","projects","key","type","managerId","memberIds","tasks","summary","status","priority","assigneeId","description","API_DELAY","loadProjects","storedProjects","localStorage","getItem","JSON","parse","e","console","error","loadUsers","storedUsers","saveProjects","currentProjects","setItem","stringify","getUserName","user","find","u","getAllUsers","Promise","resolve","setTimeout","data","getProjects","getProjectDetails","projectKey","project","p","populatedTasks","map","task","assigneeName","members","allUsers","updateTask","taskId","updates","projectIndex","findIndex","taskIndex","t","createTask","newTask","nextIdNumber","length","nextId","taskWithId","toUpperCase","push","createProject","newProjectData","reject","some","message","String","padStart","newProject","addProjectMember","normalizedEmail","toLowerCase","trim","existingUser","userId","nextUserIdNumber","newUserId","newUserName","split","newUser","charAt","slice","includes"],"sources":["C:/Users/User/Downloads/tasked-frontend/tasked-app/client/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n\r\n// --- 1. USERS & PROJECTS MOCK DATA ---\r\n// Added email field for all initial mock users for consistency\r\nlet mockUsers = [\r\n    { id: 'user-1', name: 'Alice Johnson', email: 'alice@example.com', role: 'Project Manager' },\r\n    { id: 'user-2', name: 'Bob Smith', email: 'bob@example.com', role: 'Developer' },\r\n    { id: 'user-3', name: 'Charlie Davis', email: 'charlie@example.com', role: 'Tester' },\r\n    { id: 'user-4', name: 'Diana Prince', email: 'diana@example.com', role: 'UX Designer' },\r\n];\r\nexport const projectTypes = ['Scrum', 'Kanban', 'Basic'];\r\nexport const statuses = ['To Do', 'In Progress', 'Done', 'Review', 'Blocked'];\r\n\r\nlet projects = [\r\n    {\r\n        id: 'PROJ-001',\r\n        name: 'Tasked App Core',\r\n        key: 'TASKD',\r\n        type: 'Kanban',\r\n        managerId: 'user-1',\r\n        memberIds: ['user-1', 'user-2', 'user-3', 'user-4'],\r\n        tasks: [\r\n            { id: 'TASKD-1', summary: 'Setup React structure', status: 'Done', priority: 'High', assigneeId: 'user-2', description: 'Initialize the app and set up routing.' },\r\n            { id: 'TASKD-2', summary: 'Implement drag-and-drop', status: 'In Progress', priority: 'High', assigneeId: 'user-2', description: 'Use native D&D events to move cards between columns.' },\r\n            { id: 'TASKD-3', summary: 'Design Project List Page', status: 'To Do', priority: 'Medium', assigneeId: 'user-4', description: 'Create a clean, functional design for the project selection list.' },\r\n            { id: 'TASKD-4', summary: 'Write API mock data', status: 'Blocked', priority: 'High', assigneeId: 'user-3', description: 'Create and refine mock data for users, projects, and tasks.' },\r\n        ],\r\n    },\r\n    {\r\n        id: 'PROJ-002',\r\n        name: 'Marketing Campaign Launch',\r\n        key: 'MKTG',\r\n        type: 'Scrum',\r\n        managerId: 'user-4',\r\n        memberIds: ['user-1', 'user-4'],\r\n        tasks: [\r\n            { id: 'MKTG-1', summary: 'Finalize ad copy', status: 'Done', priority: 'Medium', assigneeId: 'user-4', description: 'Review and approve all marketing ad copy.' },\r\n            { id: 'MKTG-2', summary: 'Schedule social posts', status: 'In Progress', priority: 'Low', assigneeId: 'user-1', description: 'Schedule all posts for the first week of the campaign.' },\r\n        ],\r\n    },\r\n];\r\n\r\nconst API_DELAY = 300; // Simulate network latency\r\n\r\n// --- 2. LOCAL STORAGE MANAGEMENT ---\r\nconst loadProjects = () => {\r\n    try {\r\n        const storedProjects = localStorage.getItem('taskedProjects');\r\n        if (storedProjects) {\r\n            projects = JSON.parse(storedProjects);\r\n        }\r\n    } catch (e) {\r\n        console.error(\"Could not load projects from local storage:\", e);\r\n    }\r\n};\r\n\r\n// NEW: Load users from local storage\r\nconst loadUsers = () => {\r\n    try {\r\n        const storedUsers = localStorage.getItem('taskedUsers');\r\n        if (storedUsers) {\r\n            mockUsers = JSON.parse(storedUsers);\r\n        }\r\n    } catch (e) {\r\n        console.error(\"Could not load users from local storage:\", e);\r\n    }\r\n};\r\n\r\n// Update: Saves both projects and users (if users change, which can happen in addProjectMember)\r\nconst saveProjects = (currentProjects) => {\r\n    try {\r\n        localStorage.setItem('taskedProjects', JSON.stringify(currentProjects));\r\n        localStorage.setItem('taskedUsers', JSON.stringify(mockUsers)); // Always save users when saving projects\r\n    } catch (e) {\r\n        console.error(\"Could not save data to local storage:\", e);\r\n    }\r\n};\r\n\r\n// Load data immediately when the script runs\r\nloadProjects();\r\nloadUsers(); // Load users as well\r\n\r\n// Helper to get user name for tasks and projects\r\nconst getUserName = (id) => {\r\n    const user = mockUsers.find(u => u.id === id);\r\n    // If user is not found, it means they might have been added on another machine/session \r\n    // but the local storage hasn't been synced. Return a placeholder.\r\n    return user ? user.name : 'Unassigned (ID: ' + id + ')';\r\n};\r\n\r\n// --- 3. API FUNCTIONS ---\r\n\r\n// Gets all users (now potentially including dynamically added users)\r\nexport const getAllUsers = () => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve({ status: 200, data: mockUsers });\r\n        }, API_DELAY);\r\n    });\r\n};\r\n\r\n// Gets the list of all projects for the ProjectList page\r\nexport const getProjects = () => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve({ status: 200, data: projects });\r\n        }, API_DELAY);\r\n    });\r\n};\r\n\r\n// Gets details for a single project (used by KanbanBoard and TaskDetail)\r\nexport const getProjectDetails = (projectKey) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            const project = projects.find(p => p.key === projectKey);\r\n            if (project) {\r\n                // Populate task assignee names for display\r\n                const populatedTasks = project.tasks.map(task => ({\r\n                    ...task,\r\n                    assigneeName: getUserName(task.assigneeId)\r\n                }));\r\n\r\n                const members = project.memberIds.map(id => {\r\n                    // Use mockUsers (which may contain new users)\r\n                    const user = mockUsers.find(u => u.id === id);\r\n                    return user ? { id: user.id, name: user.name, role: user.role } : { id, name: 'Unknown User', role: 'N/A' };\r\n                });\r\n\r\n                resolve({\r\n                    status: 200,\r\n                    data: { ...project, tasks: populatedTasks },\r\n                    members: members,\r\n                    statuses: statuses,\r\n                    allUsers: mockUsers, // Provide all users (including new ones) for task assignment dropdowns\r\n                });\r\n                return;\r\n            }\r\n            resolve({ status: 404, error: 'Project not found' });\r\n        }, API_DELAY);\r\n    });\r\n};\r\n\r\n// Updates a single field in a task (used by TaskDetail and KanbanBoard for drag-and-drop)\r\nexport const updateTask = (projectKey, taskId, updates) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            const projectIndex = projects.findIndex(p => p.key === projectKey);\r\n            if (projectIndex !== -1) {\r\n                const taskIndex = projects[projectIndex].tasks.findIndex(t => t.id === taskId);\r\n                if (taskIndex !== -1) {\r\n                    projects[projectIndex].tasks[taskIndex] = {\r\n                        ...projects[projectIndex].tasks[taskIndex],\r\n                        ...updates, // updates includes status or assigneeId\r\n                    };\r\n                    saveProjects(projects);\r\n                    resolve({ status: 200, data: projects[projectIndex].tasks[taskIndex] });\r\n                    return;\r\n                }\r\n            }\r\n            resolve({ status: 404, error: 'Task or Project not found' });\r\n        }, API_DELAY);\r\n    });\r\n};\r\n\r\n// Creates a new task (used by CreateTaskModal)\r\nexport const createTask = (projectKey, newTask) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            const projectIndex = projects.findIndex(p => p.key === projectKey);\r\n            if (projectIndex !== -1) {\r\n                // Generate next task ID\r\n                const nextIdNumber = projects[projectIndex].tasks.length + 1;\r\n                const nextId = `${projectKey}-${nextIdNumber}`;\r\n\r\n                const taskWithId = {\r\n                    ...newTask,\r\n                    id: nextId.toUpperCase(),\r\n                    assigneeId: newTask.assigneeId || ''\r\n                };\r\n                projects[projectIndex].tasks.push(taskWithId);\r\n                saveProjects(projects);\r\n                resolve({ status: 201, data: taskWithId });\r\n                return;\r\n            }\r\n            resolve({ status: 404, error: 'Project not found' });\r\n        }, API_DELAY);\r\n    });\r\n};\r\n\r\n// Creates a new project (used by CreateProjectModal)\r\nexport const createProject = (newProjectData) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            // 1. Check if key already exists\r\n            if (projects.some(p => p.key === newProjectData.key.toUpperCase())) {\r\n                reject({ status: 409, message: `Project key '${newProjectData.key.toUpperCase()}' already exists.` });\r\n                return;\r\n            }\r\n\r\n            // 2. Generate new unique ID for the project\r\n            const nextIdNumber = projects.length + 1;\r\n            const nextId = `PROJ-${String(nextIdNumber).padStart(3, '0')}`; // e.g., PROJ-003\r\n\r\n            // 3. Construct the new project object\r\n            const newProject = {\r\n                id: nextId,\r\n                name: newProjectData.name,\r\n                key: newProjectData.key.toUpperCase(),\r\n                type: newProjectData.type,\r\n                managerId: newProjectData.managerId,\r\n                memberIds: [newProjectData.managerId], // Manager is the initial member\r\n                tasks: [], // Starts with an empty task list\r\n            };\r\n\r\n            // 4. Add to list and save\r\n            projects.push(newProject);\r\n            saveProjects(projects);\r\n\r\n            resolve({ status: 201, data: newProject, message: `Project ${newProject.key} created successfully.` });\r\n        }, API_DELAY);\r\n    });\r\n};\r\n\r\n// Adds a member to an existing project (used by ProjectSettings)\r\nexport const addProjectMember = (projectKey, email) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const projectIndex = projects.findIndex(p => p.key === projectKey);\r\n            const normalizedEmail = email.toLowerCase().trim();\r\n\r\n            if (projectIndex === -1) {\r\n                return reject({ status: 404, message: `Project ${projectKey} not found.` });\r\n            }\r\n\r\n            // 1. Try to find existing user by email\r\n            let existingUser = mockUsers.find(u => u.email === normalizedEmail);\r\n            let userId;\r\n            let message;\r\n\r\n            if (existingUser) {\r\n                userId = existingUser.id;\r\n                message = `Existing user ${existingUser.name} added to project.`;\r\n            } else {\r\n                // 2. User does not exist - Create a new user (mocking registration)\r\n                const nextUserIdNumber = mockUsers.length + 1;\r\n                const newUserId = `user-${nextUserIdNumber}`;\r\n                const newUserName = normalizedEmail.split('@')[0]; // Use the part before @ as a default name\r\n\r\n                const newUser = {\r\n                    id: newUserId,\r\n                    // Capitalize the first letter of the default name\r\n                    name: newUserName.charAt(0).toUpperCase() + newUserName.slice(1),\r\n                    email: normalizedEmail,\r\n                    role: 'Unassigned', // Default role for new users\r\n                };\r\n\r\n                mockUsers.push(newUser); // Add new user to mock data\r\n                userId = newUserId;\r\n                message = `New user ${newUser.name} created and added to project.`;\r\n            }\r\n\r\n            // 3. Check if user is already a member\r\n            if (projects[projectIndex].memberIds.includes(userId)) {\r\n                return reject({ status: 409, message: 'User is already a member of this project.' });\r\n            }\r\n\r\n            // 4. Add the user ID to the project members list\r\n            projects[projectIndex].memberIds.push(userId);\r\n\r\n            // 5. Save both updated projects and users\r\n            saveProjects(projects);\r\n\r\n            resolve({ status: 200, message: message, newUserId: userId });\r\n\r\n        }, API_DELAY);\r\n    });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}