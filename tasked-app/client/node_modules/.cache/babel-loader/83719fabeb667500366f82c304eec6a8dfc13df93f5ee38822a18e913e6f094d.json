{"ast":null,"code":"// client/src/services/api.js\n\n// --- CONFIGURATION ---\n// This must match the port and path of your Node.js Express server\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// Centralized error handling for all API responses\nconst handleResponse = async response => {\n  const data = await response.json();\n  if (!response.ok) {\n    // Throw an error with the server message\n    throw new Error(data.error || data.message || response.statusText);\n  }\n  return data;\n};\n\n// --- API FUNCTIONS ---\n\nexport const getAllUsers = async () => {\n  const response = await fetch(`${API_BASE_URL}/users`);\n  return handleResponse(response);\n};\nexport const getProjects = async () => {\n  const response = await fetch(`${API_BASE_URL}/projects`);\n  return handleResponse(response);\n};\nexport const getProjectDetails = async projectKey => {\n  const response = await fetch(`${API_BASE_URL}/projects/${projectKey}`);\n  return handleResponse(response);\n};\nexport const updateTask = async (projectKey, taskId, updates) => {\n  const response = await fetch(`${API_BASE_URL}/projects/${projectKey}/tasks/${taskId}`, {\n    method: 'PATCH',\n    // Use PATCH for partial updates\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updates)\n  });\n  return handleResponse(response);\n};\nexport const createTask = async (projectKey, newTask) => {\n  const response = await fetch(`${API_BASE_URL}/projects/${projectKey}/task`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newTask)\n  });\n  return handleResponse(response);\n};\n\n// Function for Adding Members by Email (Now triggers email on the server)\nexport const addProjectMember = async (projectKey, email) => {\n  const response = await fetch(`${API_BASE_URL}/projects/${projectKey}/members`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  return handleResponse(response);\n};","map":{"version":3,"names":["API_BASE_URL","handleResponse","response","data","json","ok","Error","error","message","statusText","getAllUsers","fetch","getProjects","getProjectDetails","projectKey","updateTask","taskId","updates","method","headers","body","JSON","stringify","createTask","newTask","addProjectMember","email"],"sources":["C:/Users/User/Downloads/tasked-frontend/tasked-app/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\n\r\n// --- CONFIGURATION ---\r\n// This must match the port and path of your Node.js Express server\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\n// Centralized error handling for all API responses\r\nconst handleResponse = async (response) => {\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        // Throw an error with the server message\r\n        throw new Error(data.error || data.message || response.statusText);\r\n    }\r\n    return data;\r\n};\r\n\r\n// --- API FUNCTIONS ---\r\n\r\nexport const getAllUsers = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/users`);\r\n    return handleResponse(response);\r\n};\r\n\r\nexport const getProjects = async () => {\r\n    const response = await fetch(`${API_BASE_URL}/projects`);\r\n    return handleResponse(response);\r\n};\r\n\r\nexport const getProjectDetails = async (projectKey) => {\r\n    const response = await fetch(`${API_BASE_URL}/projects/${projectKey}`);\r\n    return handleResponse(response);\r\n};\r\n\r\nexport const updateTask = async (projectKey, taskId, updates) => {\r\n    const response = await fetch(`${API_BASE_URL}/projects/${projectKey}/tasks/${taskId}`, {\r\n        method: 'PATCH', // Use PATCH for partial updates\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(updates),\r\n    });\r\n    return handleResponse(response);\r\n};\r\n\r\nexport const createTask = async (projectKey, newTask) => {\r\n    const response = await fetch(`${API_BASE_URL}/projects/${projectKey}/task`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(newTask),\r\n    });\r\n    return handleResponse(response);\r\n};\r\n\r\n// Function for Adding Members by Email (Now triggers email on the server)\r\nexport const addProjectMember = async (projectKey, email) => {\r\n    const response = await fetch(`${API_BASE_URL}/projects/${projectKey}/members`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email }),\r\n    });\r\n    return handleResponse(response);\r\n};"],"mappings":"AAAA;;AAEA;AACA;AACA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACvC,MAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClC,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IACd;IACA,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAIJ,IAAI,CAACK,OAAO,IAAIN,QAAQ,CAACO,UAAU,CAAC;EACtE;EACA,OAAON,IAAI;AACf,CAAC;;AAED;;AAEA,OAAO,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,YAAY,QAAQ,CAAC;EACrD,OAAOC,cAAc,CAACC,QAAQ,CAAC;AACnC,CAAC;AAED,OAAO,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMV,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,YAAY,WAAW,CAAC;EACxD,OAAOC,cAAc,CAACC,QAAQ,CAAC;AACnC,CAAC;AAED,OAAO,MAAMW,iBAAiB,GAAG,MAAOC,UAAU,IAAK;EACnD,MAAMZ,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,YAAY,aAAac,UAAU,EAAE,CAAC;EACtE,OAAOb,cAAc,CAACC,QAAQ,CAAC;AACnC,CAAC;AAED,OAAO,MAAMa,UAAU,GAAG,MAAAA,CAAOD,UAAU,EAAEE,MAAM,EAAEC,OAAO,KAAK;EAC7D,MAAMf,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,YAAY,aAAac,UAAU,UAAUE,MAAM,EAAE,EAAE;IACnFE,MAAM,EAAE,OAAO;IAAE;IACjBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;EAChC,CAAC,CAAC;EACF,OAAOhB,cAAc,CAACC,QAAQ,CAAC;AACnC,CAAC;AAED,OAAO,MAAMqB,UAAU,GAAG,MAAAA,CAAOT,UAAU,EAAEU,OAAO,KAAK;EACrD,MAAMtB,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,YAAY,aAAac,UAAU,OAAO,EAAE;IACxEI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,OAAO;EAChC,CAAC,CAAC;EACF,OAAOvB,cAAc,CAACC,QAAQ,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMuB,gBAAgB,GAAG,MAAAA,CAAOX,UAAU,EAAEY,KAAK,KAAK;EACzD,MAAMxB,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,YAAY,aAAac,UAAU,UAAU,EAAE;IAC3EI,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEI;IAAM,CAAC;EAClC,CAAC,CAAC;EACF,OAAOzB,cAAc,CAACC,QAAQ,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}